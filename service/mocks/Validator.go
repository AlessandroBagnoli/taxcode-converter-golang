// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	service "taxcode-converter/service"

	mock "github.com/stretchr/testify/mock"
)

// Validator is an autogenerated mock type for the Validator type
type Validator struct {
	mock.Mock
}

// ValidateCalculatePersonDataReq provides a mock function with given fields: req
func (_m *Validator) ValidateCalculatePersonDataReq(req service.CalculatePersonDataRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(service.CalculatePersonDataRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateCalculateTaxCodeReq provides a mock function with given fields: req
func (_m *Validator) ValidateCalculateTaxCodeReq(req service.CalculateTaxCodeRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(service.CalculateTaxCodeRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewValidator interface {
	mock.TestingT
	Cleanup(func())
}

// NewValidator creates a new instance of Validator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewValidator(t mockConstructorTestingTNewValidator) *Validator {
	mock := &Validator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
